# terraform/modules/digitalocean/cloud-init.yml
#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker-compose
  - nginx
  - certbot
  - python3-certbot-nginx
  - htop
  - curl
  - git

write_files:
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        }
      }

  - path: /opt/ehit_backend/.env
    content: |
      SECRET_KEY=django-insecure-production-key-change-this-in-production
      DEBUG=False
      DATABASE_URL=${database_url}
      REDIS_URL=redis://localhost:6379/0
      ALLOWED_HOSTS=${domain_name},localhost
      STATIC_BUCKET=${static_bucket}
      MEDIA_BUCKET=${media_bucket}
      AWS_ACCESS_KEY_ID=${aws_access_key_id}
      AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
      AWS_S3_REGION_NAME=${aws_s3_region_name}

  - path: /opt/ehit_backend/docker-compose.yml
    content: |
      version: '3.8'
      services:
        redis:
          image: redis:7-alpine
          container_name: ehit_redis
          command: redis-server --appendonly yes
          volumes:
            - redis_data:/data
          ports:
            - "6379:6379"
          networks:
            - ehit_network
          restart: unless-stopped

        web:
          image: ghcr.io/igorbrandao18/ehit-backend:latest
          container_name: ehit_backend
          command: >
            sh -c "python manage.py migrate &&
                   python manage.py collectstatic --noinput &&
                   gunicorn ehit_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3"
          volumes:
            - static_volume:/app/staticfiles
            - media_volume:/app/media
          ports:
            - "8000:8000"
          env_file:
            - .env
          depends_on:
            - redis
          networks:
            - ehit_network
          restart: unless-stopped

        nginx:
          image: nginx:alpine
          container_name: ehit_nginx
          ports:
            - "80:80"
            - "443:443"
          volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - static_volume:/app/staticfiles
            - media_volume:/app/media
            - /etc/letsencrypt:/etc/letsencrypt
          depends_on:
            - web
          networks:
            - ehit_network
          restart: unless-stopped

      volumes:
        redis_data:
        static_volume:
        media_volume:

      networks:
        ehit_network:
          driver: bridge

  - path: /opt/ehit_backend/nginx.conf
    content: |
      events {
          worker_connections 1024;
      }

      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          
          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
          
          upstream django_backend {
              server web:8000;
          }
          
          server {
              listen 80;
              server_name ${domain_name};
              
              location / {
                  proxy_pass http://django_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      }

runcmd:
  - systemctl enable docker
  - systemctl start docker
  - systemctl stop nginx
  - systemctl disable nginx
  - cd /opt/ehit_backend
  - docker-compose pull
  - docker-compose up -d
  - sleep 30
  - certbot certonly --standalone -d ${domain_name} --non-interactive --agree-tos --email admin@${domain_name}
  - docker-compose restart nginx
  - echo "Deployment completed successfully" > /var/log/deployment.log
