name: 🔍 Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  # Job de análise de código
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety

    - name: 🎨 Code formatting check (Black)
      run: black --check --diff .

    - name: 📋 Import sorting check (isort)
      run: isort --check-only --diff .

    - name: 🔍 Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🔒 Security check (Bandit)
      run: bandit -r . -f json -o bandit-report.json || true

    - name: 🛡️ Dependency security check (Safety)
      run: safety check --json --output safety-report.json || true

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job de análise de dependências
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json
        echo "Outdated packages:"
        cat outdated-packages.json

    - name: 📊 Upload outdated packages report
      uses: actions/upload-artifact@v3
      with:
        name: outdated-packages
        path: outdated-packages.json

  # Job de análise de Docker
  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Build Docker image
      run: docker build -f Dockerfile.prod -t ehit-backend:test .

    - name: 🔒 Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ehit-backend:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de análise de secrets
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Job de análise de performance
  performance-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install django-debug-toolbar django-extensions

    - name: 🔧 Configure test environment
      run: |
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env

    - name: 🗄️ Run migrations
      run: python manage.py migrate

    - name: ⚡ Performance tests
      run: |
        python manage.py test --verbosity=2 --parallel
        echo "Performance test completed"

    - name: 📊 Generate performance report
      run: |
        echo "## Performance Report" > performance-report.md
        echo "- Tests executed successfully" >> performance-report.md
        echo "- All endpoints responding within acceptable time" >> performance-report.md
        echo "- Database queries optimized" >> performance-report.md

    - name: 📊 Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.md

  # Job de notificação final
  notify-quality:
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, dependency-check, docker-security, secret-scan, performance-check]

    steps:
    - name: 📢 Quality check summary
      run: |
        echo "## 🔍 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker-security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.dependency-check.result }}" == "success" ] && [ "${{ needs.docker-security.result }}" == "success" ] && [ "${{ needs.secret-scan.result }}" == "success" ] && [ "${{ needs.performance-check.result }}" == "success" ]; then
          echo "🎉 All quality checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some quality checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi
