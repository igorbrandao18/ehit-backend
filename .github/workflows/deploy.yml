name: 🚀 Deploy EHIT Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: 🔑 Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "Host 165.227.180.118" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config

    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting deployment..."
        
        # Connect to server and deploy
        ssh root@165.227.180.118 "
          echo '📥 Cloning repository...'
          
          # Remove old directory
          rm -rf /opt/ehit_backend
          
          # Clone fresh repository
          git clone https://github.com/igorbrandao18/ehit-backend.git /opt/ehit_backend
          
          # Navigate to project
          cd /opt/ehit_backend
          
          # Stop system nginx to free ports 80/443
          echo '🛑 Stopping system nginx...'
          systemctl stop nginx || true
          
          # Stop only application containers (preserve database)
          echo '🛑 Stopping application containers...'
          docker-compose -f docker/prod/docker-compose.yml down || true
          
          # Remove only application images (preserve database data)
          echo '🧹 Removing application images...'
          docker rmi \$(docker images | grep -E '(ehit|web|nginx)' | awk '{print \$3}') || true
          
          # Clean Docker system but preserve volumes
          echo '🧹 Cleaning Docker system (preserving volumes)...'
          docker system prune -af || true
          
          # Create .env file
          echo '🔧 Creating .env file...'
          cat > .env << EOL
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG=False
        DATABASE_URL=postgresql://ehit_user:ehit_password@db:5432/ehit_db
        REDIS_URL=redis://redis:6379/0
        ALLOWED_HOSTS=prod.ehitapp.com.br,165.227.180.118,localhost
        SECURE_SSL_REDIRECT=False
        SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')
        SESSION_COOKIE_SECURE=False
        CSRF_COOKIE_SECURE=False
        CSRF_TRUSTED_ORIGINS=https://prod.ehitapp.com.br,http://prod.ehitapp.com.br
        EOL
          
          # Start services
          echo '🚀 Starting services...'
          docker-compose -f docker/prod/docker-compose.yml up -d --build
          
          # Wait for services
          echo '⏳ Waiting for services...'
          sleep 60
          
          # Wait for database
          echo '🗄️ Waiting for database...'
          sleep 10
          docker-compose -f docker/prod/docker-compose.yml exec -T db pg_isready -U ehit_user
          
          # Create migrations
          echo '📝 Creating migrations...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py makemigrations
          
          # Run migrations
          echo '🗄️ Running migrations...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py migrate
          
          # Collect static files
          echo '📦 Collecting static files...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py collectstatic --noinput
          
          # Superuser already exists from previous deployment
          echo '👤 Superuser already exists (preserved from previous deployment)'
          
          # Configure SSL
          echo '🔒 Configuring SSL...'
          # Configure SSL with Let's Encrypt (using Docker nginx)
          echo '🔒 Configuring SSL with Let's Encrypt...'
          # Wait for nginx container to be ready
          sleep 30
          # Install certbot if not exists
          apt-get update && apt-get install -y certbot python3-certbot-nginx || true
          # Get certificate
          certbot certonly --nginx -d prod.ehitapp.com.br --non-interactive --agree-tos --email admin@ehitapp.com.br || echo 'SSL configuration failed, continuing...'
          
          # Show status
          echo '📊 Final status:'
          docker-compose -f docker/prod/docker-compose.yml ps
          
          echo '🎉 Deployment completed!'
          echo '🌐 https://prod.ehitapp.com.br'
        "

    - name: 🔍 Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 30
        
        # Test health endpoint
        if curl -f https://prod.ehitapp.com.br/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
        
        echo "🎉 Deployment verified successfully!"