name: 🚀 Deploy EHIT Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting deployment..."
        
        # Connect to server and deploy
        ssh root@165.227.180.118 "
          echo '📥 Cloning repository...'
          
          # Remove old directory
          rm -rf /opt/ehit_backend
          
          # Clone fresh repository
          git clone https://github.com/igorbrandao18/ehit-backend.git /opt/ehit_backend
          
          # Navigate to project
          cd /opt/ehit_backend
          
          # Stop all containers
          echo '🛑 Stopping all containers...'
          docker stop \$(docker ps -aq) || true
          docker rm \$(docker ps -aq) || true
          
          # Remove all images
          echo '🧹 Removing all images...'
          docker rmi \$(docker images -q) || true
          
          # Clean Docker system
          echo '🧹 Cleaning Docker system...'
          docker system prune -af --volumes || true
          
          # Create .env file
          echo '🔧 Creating .env file...'
          cat > .env << EOL
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG=False
        DATABASE_URL=postgresql://ehit_user:ehit_password@db:5432/ehit_db
        REDIS_URL=redis://redis:6379/0
        ALLOWED_HOSTS=prod.ehitapp.com.br,165.227.180.118,localhost
        SECURE_SSL_REDIRECT=True
        SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')
        SESSION_COOKIE_SECURE=True
        CSRF_COOKIE_SECURE=True
        EOL
          
          # Start services
          echo '🚀 Starting services...'
          docker-compose -f docker/prod/docker-compose.yml up -d --build
          
          # Wait for services
          echo '⏳ Waiting for services...'
          sleep 60
          
          # Wait for database
          echo '🗄️ Waiting for database...'
          until docker-compose -f docker/prod/docker-compose.yml exec -T db pg_isready -U ehit_user; do
            echo 'Database not ready, waiting...'
            sleep 2
          done
          
          # Create migrations
          echo '📝 Creating migrations...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py makemigrations
          
          # Run migrations
          echo '🗄️ Running migrations...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py migrate
          
          # Collect static files
          echo '📦 Collecting static files...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py collectstatic --noinput
          
          # Create superuser
          echo '👤 Creating superuser...'
          docker-compose -f docker/prod/docker-compose.yml exec -T web python manage.py shell -c \"
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='admin').exists():
              User.objects.create_superuser('admin', 'admin@ehitapp.com.br', 'admin123')
              print('Superuser created: admin/admin123')
          else:
              print('Superuser already exists')
          \"
          
          # Configure SSL
          echo '🔒 Configuring SSL...'
          certbot --nginx -d prod.ehitapp.com.br --non-interactive --agree-tos --email admin@ehitapp.com.br || echo 'SSL failed, continuing...'
          
          # Show status
          echo '📊 Final status:'
          docker-compose -f docker/prod/docker-compose.yml ps
          
          echo '🎉 Deployment completed!'
          echo '🌐 https://prod.ehitapp.com.br'
        "

    - name: 🔍 Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 30
        
        # Test health endpoint
        if curl -f https://prod.ehitapp.com.br/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
        
        echo "🎉 Deployment verified successfully!"